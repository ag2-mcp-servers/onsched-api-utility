# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T07:50:24+00:00



import argparse
import json
import os
from typing import *

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, UnsuportedSecurityStub

from models import ThreadPoolInfo

app = MCPProxy(
    description='Endpoints for system utilities. e.g.Health',
    title='OnSched API Utility',
    version='v1',
    servers=[{'url': 'https://sandbox-api.onsched.com/'}],
)


@app.get(
    '/utility/v1/health/heartbeat',
    tags=['health_status_monitoring'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_utility_v1_health_heartbeat():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/utility/v1/health/threadinfo',
    tags=['health_status_monitoring'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_utility_v1_health_threadinfo():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
